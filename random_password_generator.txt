"""
Random Password Generator by DoubleDown11.

This program generates a random/list of random passwords for the user, based off of a set of chosen criteria.
The user can choose to form passwords from any, or all, of the following character types: lowercase, uppercase, numbers, symbols.

The user is then given a list of options as to what they can do with the generated passwords.


TODO:
* PlainText permission denied 'passwordnames'
* Plaintext error 'password_names_values'

* json / plaintext --> Add a var at top of each function which includes the location of a folder on the desktop,
where output will be saved. --> In response to permission denied error.

"""

import random
import string
import os
import pyperclip
import requests
import json
import time
import zxcvbn

def number_passwords():
    """Collects and returns the number of random passwords the user wants to generate."""

    # Below while loop validates the num_passwords value.
    while True:
        print("How many passwords would you like to generate? \n")
        print('Please choose a number between 1 and 10!\n')
        num_passwords = int(input("Enter Here: "))
        print('\n\n\n')

        if type(num_passwords) == int and 0 < num_passwords < 11:
            return num_passwords

        else:
            print("Please input a value that is an integer between the values of 1-10. Try Again!")
            continue


def get_pass_len(num_password, current_password):
    """Receives password length as user input and returns the value to main."""

    # Below while loop is run is user wants more than 1 password.
    if num_password != 1:
        # Below while loop validates password length choice by user.
        while True:
            print(f"How long would you like password number {current_password} to be? \n")
            print("Please note -- Minimum password length is 14 characters.\n")
            pass_len = input("Enter Here: ")
            print('\n\n\n\n\n')

            if type(pass_len) == str:
                if pass_len.isnumeric():
                    pass_len = int(pass_len)
                    if pass_len >= 14:
                        return pass_len

                    else:
                        print("Password length entered must in the form of an int, and at least 14 characters.")
                        print("Please try again!")
                        input("Press Enter to Continue.")
                        print('\n\n\n\n')

                else:
                    print("Password length entered must in the form of an int, and at least 14 characters.")
                    print("Please try again!")
                    input("Press Enter to Continue.")
                    print('\n\n\n\n')
                    continue



    # Code block below is run if user chooses to generate only 1 password.
    else:
        # Below while loop validates password length choice by user.
        while True:
            print("How long would you like your password to be? \n")
            print("Please note -- Minimum password length is 14 characters.\n")
            pass_len = input("Enter Here: ")
            print('\n\n\n')

            if type(pass_len) == str:
                if pass_len.isnumeric():
                    pass_len = int(pass_len)
                    if pass_len >= 14:
                        return pass_len

                    else:
                        print("Password length entered must in the form of an int, and at least 14 characters.")
                        print("Please try again!")
                        input("Press Enter to Continue.")
                        print('\n\n\n\n')

                else:
                    print("Password length entered must in the form of an int, and at least 14 characters.")
                    print("Please try again!")
                    input("Press Enter to Continue.")
                    print('\n\n\n\n')
                    continue


def select_chars():
    """Allows the user to choose the password characters used in the generation of the random password."""

    options = ['y', 'n']


    # Below loop verifies input for upper.
    while True:
        upper = input("Would you like to include 'Uppercase' characters in your password? (y or n): ").lower()
        print('\n\n')

        if upper not in options or type(upper) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for lower.
    while True:
        lower = input("Would you like to include 'Lowercase' characters in your password? (y or n): ").lower()
        print('\n\n')

        if lower not in options or type(lower) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for numbers.
    while True:
        numbers = input("Would you like to include 'Numbers' in your password? (y or n): ").lower()
        print('\n\n')

        if numbers not in options or type(numbers) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for symbols.
    while True:
        symbols = input("Would you like to include 'Symbols' in your password? (y or n): ").lower()
        print('\n\n')

        if symbols not in options or type(symbols) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    return [upper, lower, numbers, symbols]


def select_chars_many(password_number):
    """Allows the user to choose each passwords' characters used in the generation of each random password."""

    options = ['y', 'n']

    # Below loop verifies input for upper.
    while True:
        upper = input(f"Would you like to include 'Uppercase' characters in "
                      f"password number {password_number}? (y or n): ").lower()
        print('\n\n')

        if upper not in options or type(upper) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for lower.
    while True:
        lower = input(f"Would you like to include 'Lowercase' characters in "
                      f"password number {password_number}? (y or n): ").lower()
        print('\n\n')

        if lower not in options or type(lower) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for numbers.
    while True:
        numbers = input(f"Would you like to include 'Numbers' in "
                        f"password number {password_number}? (y or n): ").lower()
        print('\n\n')

        if numbers not in options or type(numbers) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    # Below loop verifies input for symbols.
    while True:
        symbols = input(f"Would you like to include 'Symbols' in "
                        f"password number {password_number}? (y or n): ").lower()
        print('\n\n')

        if symbols not in options or type(symbols) != str:
            print('Response invalid, Please Try Again!')
            print("Please enter response as either (y or n) in lowercase.")
            print('\n\n\n\n')
            continue
        else:
            break

    return [upper, lower, numbers, symbols]


def gen_password(length_password, password_chars):
    """Generates, and returns, a random password based off of user decided length."""

    password = ''

    # Password has only uppercase characters only.
    if password_chars[0] == 'y' and password_chars[1] == 'n' and password_chars[2] == 'n' and password_chars[3] == 'n':
        for x in range(length_password):
            # Will have to select which character type each password char will be, randomly from the list of available
            # Password chars.
            password += random.choice(string.ascii_uppercase)

    # Password has uppercase and lowercase characters only.
    elif password_chars[0] == 'y' and password_chars[1] == 'y' and password_chars[2] == 'n' and password_chars[3] == 'n':
        for x in range(length_password):
            # Will have to select which character type each password char will be, randomly from the list of available
            # Password chars.
            possible_chars = ['upper', 'lower']
            char_choice = random.choice(possible_chars)
            if char_choice == 'upper':
                password += random.choice(string.ascii_uppercase)
            elif char_choice == 'lower':
                password += random.choice(string.ascii_lowercase)

    elif password_chars[0] == 'y' and password_chars[1] == 'y' and password_chars[2] == 'y' and password_chars[3] == 'n':
        for x in range(length_password):
            # Will have to select which character type each password char will be, randomly from the list of available
            # Password chars.
            possible_chars = ['upper', 'lower', 'numbers']
            char_choice = random.choice(possible_chars)
            if char_choice == 'upper':
                password += random.choice(string.ascii_uppercase)
            elif char_choice == 'lower':
                password += random.choice(string.ascii_lowercase)
            elif char_choice == 'numbers':
                password += str(random.randint(0, 9))

    elif password_chars[0] == 'y' and password_chars[1] == 'y' and password_chars[2] == 'y' and password_chars[3] == 'y':
        for x in range(length_password):
            # Will have to select which character type each password char will be, randomly from the list of available
            # Password chars.
            possible_chars = ['upper', 'lower', 'numbers', 'symbols']
            char_choice = random.choice(possible_chars)
            if char_choice == 'upper':
                password += random.choice(string.ascii_uppercase)
            elif char_choice == 'lower':
                password += random.choice(string.ascii_lowercase)
            elif char_choice == 'numbers':
                password += str(random.randint(0, 9))
            else:
                password += random.choice(string.punctuation)

    return password


def choose_option():
    """Returns the chosen option activity to be used with the password."""

    print('We can do the following: \n')

    options = ['Plain Text', 'Clipboard Copy', 'Print To Console', 'Password Strength Checker', 'JSON',
               'Have I been Pwned?', 'Close Program']
    options_at_input = ['plaintext', 'clipboard', 'print', 'strengthcheck', 'json', 'pwned', 'goodbye']

    for x in range(len(options)):
        if options[x] == 'Plain Text':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'plaintext' at entry field below.")
            print('\n\n')

        elif options[x] == 'Clipboard Copy':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'clipboard' at entry field below.")
            print('\n\n')

        elif options[x] == 'Print To Console':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'print' at entry field below.")
            print('\n\n')

        elif options[x] == 'Password Strength Checker':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'strengthcheck' at entry field below.")
            print('\n\n')

        elif options[x] == 'JSON':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'json' at entry field below.")
            print('\n\n')

        elif options[x] == 'Have I been Pwned?':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'pwned' at entry field below.")
            print('\n\n')

        elif options[x] == 'Close Program':
            print(options[x])
            print('-' * len(options[x]), '\n')
            print(f"To select {options[x]}, type 'goodbye' at entry field below.")
            print('\n\n')


    # Below while loop verifies user option choice.
    while True:
        option_choice = input("What would you like to do?: ").lower()
        print('\n\n\n\n\n')

        if type(option_choice) == str and option_choice in options_at_input:
            return option_choice

        else:
            print("Option choice entered not valid. Please Try Again!")
            print('\n\n')
            continue


def plaintext(passwords):
    """Saves the generated password(s) to a chosen plaintext file."""

    # Below while loop verifies user file name.
    while True:
        file = input("What would you like to name the plain text file you "
                     "wish to save your passwords to?: ").capitalize()
        filename = file + '.txt'
        print('\n\n')


        if type(file) == str:

            # Check if file already exists, if not we create it and append the passwords to the file.
            if not os.path.exists(filename):
                with open(filename, 'w') as file:
                    for password in passwords:
                        file.write(password + '\n')

            else:
                print(f"Chosen file name '{filename}' already exists at this location. "
                      f"Please select a different filename!")
                break


def clipboard(passwords):
    """Saves the generated password(s) to the user's clipboard."""

    if len(passwords) == 1:
        pyperclip.copy(passwords[0])
        input("Press Enter to Continue!")
        return

    else:
        print("Would you like to copy all passwords from the list to your clipboard? "
              "Or would you care to select one to copy?")
        print("For all passwords type 'all', to select a single password type 'one' \n")

        possible_choices = ['all', 'one']
        choice = input("Please Enter Here: ").lower()
        print('\n\n')

        # Below while loop verifies user choice.
        if type(choice) == str and choice in possible_choices:
            # If user decides to copy all passwords:
            if choice == 'all':
                pyperclip.copy(passwords)

            # If user decides to copy one from the list:
            else:
                print("Please select a password number from the list below to copy to your clipboard: \n\n")

                # Prints the list of possible passwords to copy.
                for x in range(len(passwords)):
                    print(f"Password {x + 1} is: {passwords[x]}\n")

                # Below while loop verifies user password choice.
                while True:
                    pass_choice = input("Please Enter Here: ")

                    for x in range(1,11):
                        if pass_choice == x:
                            pyperclip.copy(passwords[x])
                            input("Press Enter to Continue!")
                            return

                        else:
                            if type(pass_choice) != int:
                                print("Please enter password selection as an integer value, "
                                      "as dictated by the list above!")
                                print('Please Try Again!\n')

                            elif not 10 < int(pass_choice) < 1:
                                print("Please enter password selection as an integer value between the digits 1 and 10!")
                                print("Please Try Again!\n")



def strength_check(passwords):
    """Checks the strength of the generated password(s)."""

    # If user only generated 1 password.
    if len(passwords) == 1:
        result = zxcvbn.zxcvbn(passwords[0])
        score = result['score']

        if score == 0:
            print("Password is very weak.")
            input("Press Enter to Continue!")
            print('\n\n\n')
            return

        elif 0 < score < 4:
            print(f"Password strength: {score}/4 - Weak")
            input("Press Enter to Continue!")
            print('\n\n\n')
            return

        elif score == 4:
            print("Password strength: 4/4 - Strong")
            input("Press Enter to Continue!")
            print('\n\n\n')
            return

    # If user generated more than 1 password.
    else:
        for x in range(len(passwords)):
            result = zxcvbn.zxcvbn(passwords[x])
            score = result['score']

            if score == 0:
                print("Password is very weak.")
                input("Press Enter to Continue!")
                print('\n\n\n')
                continue

            elif 0 < score < 4:
                print(f"Password strength: {score}/4 - Weak")
                input("Press Enter to Continue!")
                print('\n\n\n')
                continue

            elif score == 4:
                print("Password strength: 4/4 - Strong")
                input("Press Enter to Continue!")
                print('\n\n\n')
                continue
        return


def json(passwords):
    """Saves the generated password(s) as json output."""

    # Below while loop verifies user file name.
    while True:
        file = input("What would you like to name the json file you "
                     "wish to save your passwords to?: ").capitalize()
        filename = file + '.json'
        print('\n\n')

        if type(file) == str:

            # Check if file already exists, if not we create it and append the passwords to the file.
            if not os.path.exists(filename):
                with open(filename, 'w') as file:
                    for password in passwords:
                        file.write(password + '\n')


            else:
                print(f"Chosen file name '{filename}' already exists at this location. Please select a different filename!")
                break


def pwned_email():
    """Determines if user chosen email has been previously exposed on haveibeenpwned.com."""

    options = ['y', 'n']
    url_email = 'https://haveibeenpwned.com/'
    email_check_field_name = 'email'

    # First ask user to generate an email to test on haveibeenpwned.com.
    # Below while loop verifies email option
    print('Please enter an email to test on haveibeenpwned.com\n')
    while True:
        email = input("Enter Email Choice Here: ")
        correct = input(f"Chosen email is {email}, are you sure this value is correct? (y or n): ").lower()
        print('\n\n\n\n')

        if type(email) == str:
            if correct in options and correct == 'y':
                # Create the GET request data field.
                data = {email_check_field_name: email}

                # Save GET request to response var.
                response = requests.get(url=url_email, data=data)

                # If GET request is successful, print the output.
                if response.status_code == 200:
                    # If check is a pass.
                    if "Good news" in response.text:
                        print("Email Check Successful!\n")
                        print(f"Email entered is secure!")
                        print('\n\n\n')
                        input("Press Enter to Continue")
                        print('\n\n\n')
                        return

                    # If check is a fail.
                    else:
                        print("Email Check Successful!\n")
                        print(f"Email entered is insecure!")
                        print('\n\n\n')
                        input("Press Enter to Continue")
                        print('\n\n\n')
                        return

                # If GET request fails.
                else:
                    print("Email check not successful!\n")
                    print(f"Error code is: {response.status_code}\n")
                    print('\n\n\n')
                    return

            else:
                print("Please Try Again!\n")
                continue


def pwned(passwords):
    """Determines if user chosen password and email has been previously exposed on haveibeenpwned.com."""

    # First we ask the user to enter an email to check.
    check_email = pwned_email()

    url_passwords = 'https://haveibeenpwned.com/Passwords'
    password_check_field_name = 'Password'

    # First, we ask if the user wants to check all passwords, or just single chosen password.
    print("Would you like to check the strength of all the passwords generated?"
          "Or would you like to test the strength of just one?\n")
    print("For all passwords type 'all', to select a single password type 'one' \n")
    print("If you have only generated one password, please enter 'one' below \n")

    possible_choices = ['all', 'one']

    # Below while loop verifies user choice.
    while True:
        choice = input("Please Enter Here: ").lower()
        print('\n\n')

        # Below code is in the case the user enters 'all' on a password list of only 1 password.
        if type(choice) == str and choice == 'all' and len(passwords) == 1:
            print("You have only generated 1 password! 'all' is therefore not valid, "
                  "and you should have entered 'one'.")
            print('Please Try Again!\n')
            continue

        # If choice is valid, and len(passwords) > 1.
        elif type(choice) == str and choice in possible_choices:

            # If user chooses to test all passwords.
            if choice == 'all':
                for x in range(len(passwords)):
                    # Create the GET request data.
                    data = {password_check_field_name: passwords[x]}

                    # Save the GET request to response var.
                    response = requests.get(url=url_passwords, data=data)

                    # Below code block determines if the response is successful based off of the status code.
                    if response.status_code == 200:

                        # If the password check is a pass.
                        if 'Good news' in response.text:
                            print(f"Password strength test for password number {x}, '{passwords[x]}' is successful!\n")
                            print(f"Password strength is determined to be secure!")
                            print('\n\n\n')
                            input("Press Enter to Continue!")
                            print('\n\n\n')
                            break

                        # If password check is a fail.
                        else:
                            print(f"Password strength test for password number {x}, '{passwords[x]}' is successful!\n")
                            print(f"Password strength is determined to be insecure!")
                            print("Password has been exposed in previous data breaches!")
                            print('\n\n\n')
                            input("Press Enter to Continue!")
                            print('\n\n\n')
                            break

                    # Below code block runs if GET request does not succeed.
                    else:
                        print(f"Password strength test for password number {x}, '{passwords[x]}' has failed!\n")
                        print(f"Response status code from failed request is {response.status_code}.\n")
                        print("Please Try Again!\n")
                        continue


            # If user decides to test one password from a list of many passwords.
            elif choice == 'one' and len(passwords) > 1:
                # Prints the list of possible passwords to strength check.
                for x in range(len(passwords)):
                    print(f"Password {x + 1} is: {passwords[x]}\n")

                # Below loop verifies user password choice.
                while True:
                    pass_choice = input("Please Enter Here: ")

                    for x in range(1, 11):
                        if pass_choice == x:
                            # Create the GET request data.
                            data = {password_check_field_name: passwords[x]}

                            # Save GET request to response var.
                            response = requests.get(url=url_passwords, data=data)

                            # below code block determines if the response successful based off of the status code.
                            if response.status_code == '200':
                                # If check is a pass.
                                if "Good news" in response.text:
                                    print(f"Password Strength Test for Password {passwords[x]} is successful!\n")
                                    print(f"Password strength is determined to be secure!")
                                    print('\n\n\n')
                                    input("Press Enter to Continue!")
                                    print('\n\n\n')
                                    return

                                # If check is a fail.
                                else:
                                    print(f"Password Strength Test for Password {passwords[x]} is successful!\n")
                                    print(f"Password strength is determined to be insecure!")
                                    print('\n\n\n')
                                    input("Press Enter to Continue!")
                                    print('\n\n\n')
                                    return

                            # Below code block runs if response is not successful.
                            else:
                                print(f"Password Strength Test for Password {passwords[x]} is not successful!\n")
                                print(f"Response status code from failed request is {response.status_code}.\n")
                                print("Please Try Again!\n")
                                continue

            # If the user decides to test 1 password, from a list of 1 password.
            else:
                for x in range(len(passwords)):
                    # Create the GET request data.
                    data = {password_check_field_name: passwords[x]}

                    # Save GET request to response var.
                    response = requests.get(url=url_passwords, data=data)

                    # below code block determines if the response successful based off of the status code.
                    if response.status_code == 200:
                        # If check is a pass.
                        if "Good news" in response.text:
                            print(f"Password Strength Test for Password {passwords[x]} is successful!\n")
                            print(f"Password strength is determined to be secure!")
                            print('\n\n\n')
                            input("Press Enter to Continue!")
                            print('\n\n\n')
                            return

                        # If check is a fail.
                        else:
                            print(f"Password Strength Test for Password {passwords[x]} is successful!\n")
                            print(f"Password strength is determined to be insecure!")
                            print('\n\n\n')
                            input("Press Enter to Continue!")
                            print('\n\n\n')
                            return

                    # Below code block runs if response is not successful.
                    else:
                        print(f"Password Strength Test for Password {passwords[x]} is not successful!\n")
                        print(f"Response status code from failed request is {response.status_code}.\n")
                        print("Please Try Again!\n")
                        continue

        else:
            print("Choice entered must be of type string, and must be one of the previously mentioned options.")
            print("-------------------------------------------------------------------------------------------")
            print('\n\n\n')

            # Re-displays options if the user wishes, and verifies user input.
            while True:
                choice = input("Would you like to see the options again? (y or n): ").lower()
                print('\n\n\n\n')
                choices = ['y', 'n']
                if choice in choices and type(choice) == str:
                    print(f"The possible options are: '{possible_choices[0]}' and '{possible_choices[1]}'.")
                    print('\n\n\n\n')
                    break

                elif choice not in choices or type(choice) != str:
                    print("Please enter decision to see options again as either (y or n), in lowercase.")
                    print('\n\n\n\n')
                    continue

                elif choice == 'n':
                    print("Please Try Again!\n")
                    break



def main():
    """Main Function."""

    # Below funtion returns the chosen number of passwords to be generated.
    num_passwords = number_passwords()

    print('You will now be asked to choose the character composition for each password that will be generated!\n\n')

    passwords = []

    # Below loop iterates through password generation process, num_password times.
    for x in range(num_passwords):

        # Below function returns the chosen password length
        length_pass = get_pass_len(num_passwords, x)

        # Below function returns a list with desired password characteristics, if a user wants 1 password.
        if num_passwords == 1:
            select_password_chars = select_chars()

        else:
            # Below function returns a list with desired password characteristics, if a user wants more than 1 password.
            select_password_chars = select_chars_many(x)

        random_password = gen_password(length_pass, select_password_chars)

        print("Please wait, password is being created.")
        time.sleep(3)
        # Add animation of moving lines.
        print('\n\n\n')
        print(f"Your random password is {random_password}! \n")
        print('\n\n\n\n\n\n')

        passwords.append(random_password)

    # Below while loop will run until user is finished with post password generation activities.
    while True:
        # We can now select a suitable output method for our generated passwords.
        print('Now that your password(s) have been developed, what do you want to do with them?\n')

        chosen_option = choose_option()

        if chosen_option == 'plaintext':
            plaintext(passwords)

        elif chosen_option == 'clipboard':
            clipboard(passwords)

        elif chosen_option == 'print':
            for x in range(len(passwords)):
                print(passwords[x], '\n')
            input("Press Enter to Continue")

        elif chosen_option == 'strengthcheck':
            strength_check(passwords)

        elif chosen_option == 'json':
            json(passwords)

        elif chosen_option == 'pwned':
            pwned(passwords)

        # Add ability to choose no option, and then have program say goodbye to the user.
        elif chosen_option == 'goodbye':
            print("Thanks for stopping by, Goodbye!")
            break


if __name__ == '__main__':
    main()

